[build-system]
requires = ["setuptools>=64.0.0", "versioningit"]
build-backend = "setuptools.build_meta"

[project]
name = "{{ cookiecutter.package_name }}"
dynamic = ["version", "dependencies", "optional-dependencies"]
description = "{{ cookiecutter.description }}"
readme = "README.md"
license = { "file" = "LICENSE" }
requires-python = ">=3.11"
authors = [{ name = "{{ cookiecutter.author }}" }]
classifiers = [
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

[project.urls]
"Bug Tracker" = "{{ cookiecutter.github_url }}/issues"
Homepage = "{{ cookiecutter.github_url }}"
Source = "{{ cookiecutter.github_url }}"

[tool.setuptools.dynamic]
dependencies = { "file" = "requirements.txt" }

[tool.setuptools.dynamic.optional-dependencies]
dev = { "file" = "requirements_dev.txt" }
docs = { "file" = "docs/requirements.txt" }

# Dynamic versioning for editable installs
[tool.setuptools.cmdclass]
build_py = "versioningit.cmdclass.build_py"
sdist = "versioningit.cmdclass.sdist"

# Packaging options
[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"{{ cookiecutter.package_name }}" = ["py.typed"]

# Linters
[tool.ruff]
line-length = 95
target-version = "py311"
extend-exclude = ["conf.py", "_version.py"]

[tool.ruff.lint]
select = [
    "A",    # flake8-builtins
    "E",    # pycodestyle
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "SIM",  # flake8-simplify
    "I",    # isort
    "LOG",  # flake8-logging
    "G",    # flake8-logging-format
    "N",    # pep8-naming
    "D",    # pydocstyle
    "DOC",  # pydoclint
    "PL",   # pylint
    "BLE",  # flake8-blind-except
    "ERA",  # eradicate (commented out code)
    "TD",   # flake8-todos
    "RET",  # flake8-return
    "PTH",  # flake8-use-pathlib
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit (security issues)
    "ICN",  # flake8-import-conventions
    "ARG",  # flake8-unused-arguments
    "PIE",  # flake8-pie
    "FURB", # refurb
    "RUF",  # Ruff-specific rules
    "TRY",  # tryceratops checks
    "C90",  # mccabe (complex code)
    "PD",   # pandas-vet (pandas best practices)
    "TC",   # flake8-type-checking
    "T20",  # flake8-print (disallow print statements)
    "PGH",  # pygrep-hooks (noqa and type disable comments)
]
ignore = [
    # These clash with the ruff formatter
    "W191", # tab-indentation
    "E111", # indentation-with-invalid-multiple
    "E114", # indentation-with-invalid-multiple-comment
    "E117", # over-indented
    "D206", # docstring-tab-indentation
    "D300", # triple-single-quotes

    "UP015",  # redundant-open-modes (pyupgrade)
    "TRY003", # long messages in exceptions (tryceratops)
    "SIM108", # one line if else (flake8-bandit)
    "S311",   # random.random not allowed (flake8-bandit)
    "DOC502", # docstring-extraneous-exception (sometimes necessary)
]
unfixable = [
    "T20",  # print-statements (flake8-print)
    "B905", # zip without strict, fix defaults to False
]

[tool.ruff.lint.extend-per-file-ignores]
"__init__.py" = ["F401"] # allow unused imports
"tests/*" = [
    "S101", # use of assert in tests
    "DOC",  # docstring issues
]
"examples/*" = [
    "T20",  # allow print statements
    "D205", # allow one-liner docstrings
    "D400", # allow missing first line in docstrings
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.pep8-naming]
ignore-names = ["df", "fn", "ca", "tp", "x", "i"]

[tool.ruff.lint.pylint]
max-args = 10
max-statements = 100

[tool.ruff.format]
docstring-code-format = true

# Only necessary until pylint is fully covered by ruff
[tool.pylint.design]
max-args = 10
max-attributes = 15
max-statements = 100

[tool.pylint.messages_control]
disable = [
    "line-too-long",         # Handled by ruff
    "too-many-lines",
    "use-dict-literal",
    "use-list-literal",
    "wrong-import-position", # Compatibility with ruff
]

[tool.pylint.basic]
extension-pkg-allow-list = []

[tool.pylint.main]
ignore = ["__init__.py", "_version.py"]

[tool.mypy]
packages = ["{{ cookiecutter.package_name }}"]
namespace_packages = true
ignore_missing_imports = true
allow_redefinition = true

# Tests
[tool.pytest.ini_options]
pythonpath = ["src"]
addopts = "--cov=caf --cov-report=xml -n auto"

[tool.coverage.report]
include_namespace_packages = true

# Versioning
[tool.versioningit.vcs]
method = "git"
match = ["v*"]
default-tag = "0.0.1"

[tool.versioningit.onbuild]
source-file = "src/{{ cookiecutter.__pkg_folder }}/_version.py"
build-file = "{{ cookiecutter.__pkg_folder }}/_version.py"

[tool.versioningit.format]
distance = "{base_version}+{distance}.{vcs}{rev}"
dirty = "{base_version}+{distance}.{vcs}{rev}.dirty"
distance-dirty = "{base_version}+{distance}.{vcs}{rev}.dirty"
